name: Generate GitHub Token
description: |
  This action generates an installation access token for a specified GitHub App,
  enabling authentication in GitHub Actions workflows.
  You can specify one or more repositories to define its access scope.

  ## Usage

  ```yaml
    steps:
      - name: Generate GitHub Token
        uses: tmknom/generate-github-token-action@v0
        with:
          app-id: <your-github-app-id>
          app-private-key: <your-github-app-private-key>
          repositories: foo-repo bar-repo
  ```

inputs:
  app-id:
    required: true
    description: The ID of the GitHub App.
  app-private-key:
    required: false
    description: The private key associated with the GitHub App.
  app-private-key-file:
    required: false
    description: The file path to the GitHub App's private key.
  repositories:
    required: false
    description: A space-separated list of repositories that the token grants access to.

outputs:
  token:
    value: ${{ steps.generate.outputs.token }}
    description: The installation access token for the specified GitHub App.

runs:
  using: composite

  steps:
    - name: Generate installation access token
      id: generate
      env:
        APP_ID: ${{ inputs.app-id }}
        APP_PRIVATE_KEY: ${{ inputs.app-private-key }}
        APP_PRIVATE_KEY_FILE: ${{ inputs.app-private-key-file }}
        REPOSITORIES: ${{inputs.repositories }}
      run: |
        base64url() {
          openssl enc -base64 -A | tr '+/' '-_' | tr -d '='
        }

        sign() {
          if [[ "${APP_PRIVATE_KEY_FILE}" != "" ]]; then
            APP_PRIVATE_KEY="$(cat "${APP_PRIVATE_KEY_FILE}")"
          fi
          openssl dgst -binary -sha256 -sign <(printf '%s' "${APP_PRIVATE_KEY}")
        }

        header="$(printf '{"alg":"RS256","typ":"JWT"}' | base64url)"
        now="$(date '+%s')"
        iat="$((now - 60))"
        exp="$((now + (3 * 60)))"
        template='{"iss":"%s","iat":%s,"exp":%s}'
        payload="$(printf "${template}" "${APP_ID}" "${iat}" "${exp}" | base64url)"
        echo "::add-mask::${payload}"
        signature="$(printf '%s' "${header}.${payload}" | sign | base64url)"
        echo "::add-mask::${signature}"
        jwt="${header}.${payload}.${signature}"
        echo "::add-mask::${jwt}"

        IFS=' ' read -ra repository_names <<< "${REPOSITORIES}"
        installation_id="$(curl --location --silent --request GET \
          --url "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY_OWNER}/${repository_names[0]}/installation" \
          --header "Accept: application/vnd.github+json" \
          --header "X-GitHub-Api-Version: 2022-11-28" \
          --header "Authorization: Bearer ${jwt}" \
          | jq -r '.id'
        )"

        repositories_json="$(jq -cR 'split(" ")' <<<"${repository_names[*]}")"
        token="$(curl --location --silent --request POST \
          --url "${GITHUB_API_URL}/app/installations/${installation_id}/access_tokens" \
          --header "Accept: application/vnd.github+json" \
          --header "X-GitHub-Api-Version: 2022-11-28" \
          --header "Authorization: Bearer ${jwt}" \
          --data "$(printf '{"repositories":%s}' "${repositories_json}")" \
          | jq -r '.token'
        )"
        echo "::add-mask::${token}"
        echo "token=${token}" >>"${GITHUB_OUTPUT}"
      shell: bash
